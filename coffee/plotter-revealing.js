// Generated by CoffeeScript 1.6.3
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

window.debugLog = true;

window._log = function() {
  if ((typeof debugLog !== "undefined" && debugLog !== null) && debugLog && window.console) {
    return console.log.apply(console, arguments);
  }
};

window.Plotter = (function($) {
  var bindUIActions, calculatePerGameData, calculateScales, circleCursorIn, circleCursorOut, clearSelectedPlayers, drawChart, getGraphingData, getSelected, highlightModeSwitch, highlightModeUpdate, init, pageSetup, playerPosSwitch, renderChart, resetGraphingData, s, settings, utils, validateSelections;
  settings = function() {
    return {
      els: {
        html: $("html"),
        body: $("body"),
        renderButton: $("#render-button"),
        highlightButton: $("#highlight-button"),
        allCheckLabels: $(".check-label"),
        allCheckInput: $("input[type='checkbox']"),
        seasonCheck: $(".yr-input"),
        positionCheck: $(".pos-input"),
        playerPosRadio: $("input[name='pp-type']"),
        playerPosGroups: $("[data-input-group]"),
        gameSeasonRadio: $("input[name='stat-type']"),
        clearPlayersBtn: $("#clear-player-select"),
        chartWrapper: $("#scatterplot-wrapper"),
        origVarSelect: $("select#original"),
        varSelects: $("select.variable"),
        playerSelect: $("#player-select"),
        container: $(".container"),
        column: $(".column"),
        chart: $("#d3-scatterplot"),
        $allHoverSpans: $(".hover-data span"),
        $playerNameYr: $("#player-name-year"),
        $xVar: $("#x-axis-data-name"),
        $yVar: $("#y-axis-data-name"),
        $rVar: $("#r-axis-data-name"),
        $cVar: $("#c-axis-data-name"),
        $xVal: $("#x-axis-data-value"),
        $yVal: $("#y-axis-data-value"),
        $rVal: $("#r-axis-data-value"),
        $cVal: $("#c-axis-data-value"),
        selectedPlayersLi: function() {
          return $("#player_select_chzn li.search-choice");
        },
        selectedPlayersSpan: function() {
          return $("#player_select_chzn li.search-choice span");
        }
      },
      data: {
        fullSet: {},
        graphingSet: {}
      },
      vals: {
        datasetURL: "/data/dataset.08-12.json",
        namesURL: "/data/names.08-12.json"
      },
      storageKeys: {
        current: "plotterDataTo2012",
        old: [],
        chartPadding: 120,
        chartHeight: 0,
        chartWidth: 0,
        visibile: ":visible",
        checked: ":checked",
        selections: {},
        perGameMinGames: 4,
        posColors: {
          QB: "#3498db",
          RB: "#2ecc71",
          TE: "#f1c40f",
          WR: "#e67e22"
        },
        statAbbr: {
          PassComp: "Pass Completions",
          PassAtt: "Pass Attempts",
          PassYds: "Pass Yards",
          PassTD: "Pass Touchdowns",
          PassINT: "Interceptions",
          RushAtt: "Rushing Attempts",
          RushYds: "Rushing Yards",
          RushTD: "Rushing Touchdowns",
          RushYPA: "Yards Per Rush",
          Recs: "Receptions",
          RecYards: "Receiving Yards",
          RecYPR: "Yards Per Reception",
          RecTD: "Receiving Touchdowns",
          ScrimYds: "Total Scrimmage Yards",
          TotalTD: "Total Touchdowns",
          FantPt: "Fantasy Points",
          PosRank: "Fantasy Position Rank",
          VBD: "VBD Points",
          OvRank: "Overall VBD Rank",
          Season: "Season",
          Age: "Age",
          G: "Games Played",
          GS: "Games Started"
        },
        perGameStats: ['PassComp', 'PassAtt', 'PassYds', 'PassTD', 'PassINT', 'RushAtt', 'RushYds', 'RushTD', 'RecYards', 'RecTD', 'FantPt', 'VBD', 'ScrimYds', 'TotalTD'],
        teams: {
          ARI: {
            name: "Cardinals",
            location: "Arizona"
          },
          STL: {
            name: "Rams",
            location: "St. Louis"
          },
          SFO: {
            name: "49ers",
            location: "San Francisco"
          },
          SEA: {
            name: "Seahawks",
            location: "Seattle"
          },
          GNB: {
            name: "Packers",
            location: "Green Bay"
          },
          CHI: {
            name: "Bears",
            location: "Chicago"
          },
          DET: {
            name: "Lions",
            location: "Detroit"
          },
          MIN: {
            name: "Vikings",
            location: "Minnesota"
          },
          ATL: {
            name: "Falcons",
            location: "Atlanta"
          },
          NOR: {
            name: "Saints",
            location: "New Orleans"
          },
          TAM: {
            name: "Buccaneers",
            location: "Tampa Bay"
          },
          CAR: {
            name: "Panthers",
            location: "Carolina"
          },
          DAL: {
            name: "Cowboys",
            location: "Dallas"
          },
          NYG: {
            name: "Giants",
            location: "New York"
          },
          PHI: {
            name: "Eagles",
            location: "Philadelphia"
          },
          WAS: {
            name: "Redskins",
            location: "Washington"
          },
          SDG: {
            name: "Chargers",
            location: "San Diego"
          },
          OAK: {
            name: "Raiders",
            location: "Oakland"
          },
          KAN: {
            name: "Chiefs",
            location: "Kansas City"
          },
          DEN: {
            name: "Broncos",
            location: "Denver"
          },
          PIT: {
            name: "Steelers",
            location: "Pittsburgh"
          },
          BAL: {
            name: "Ravens",
            location: "Baltimore"
          },
          CIN: {
            name: "Bengals",
            location: "Cincinnati"
          },
          CLE: {
            name: "Browns",
            location: "Cleveland"
          },
          HOU: {
            name: "Texans",
            location: "Houston"
          },
          IND: {
            name: "Colts",
            location: "Indianapolis"
          },
          JAX: {
            name: "Jaguars",
            location: "Jacksonville"
          },
          TEN: {
            name: "Titans",
            location: "Tennessee"
          },
          NWE: {
            name: "Patriots",
            location: "New England"
          },
          NYJ: {
            name: "Jets",
            location: "New York"
          },
          MIA: {
            name: "Dolphins",
            location: "Miami"
          },
          BUF: {
            name: "Bills",
            location: "Buffalo"
          }
        }
      }
    };
  };
  s = settings();
  init = function() {
    pageSetup(s);
    return bindUIActions(s);
  };
  bindUIActions = function(s) {
    var $el;
    $el = s.els;
    $el.playerPosRadio.bind("change", function() {
      return playerPosSwitch($(this).val());
    });
    $el.renderButton.bind("click", function() {
      return renderChart(s);
    });
    $el.highlightButton.bind("click", function() {
      return highlightModeSwitch();
    });
    $el.clearPlayersBtn.bind("click", function() {
      return clearSelectedPlayers();
    });
    $el.body.on("mouseenter", "#scatterplot-wrapper circle", function() {
      return circleCursorIn("#" + this.id);
    });
    return $el.body.on("mouseleave", "#scatterplot-wrapper circle", function() {
      return circleCursorOut();
    });
  };
  pageSetup = function(s) {
    var key, selectHTML, _i, _len, _ref;
    s.els.playerPosGroups.hide();
    if (localStorage) {
      _ref = s.storageKeys.old;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        localStorage.removeItem(key);
      }
      if (localStorage[s.storageKeys.current]) {
        s.data.fullSet = JSON.parse(localStorage[s.storageKeys.current]);
      }
    } else {
      $.getJSON(s.vals.datasetURL, function(json) {
        s.data.fullSet = json;
        if (localStorage) {
          return localStorage.setItem(s.storageKeys.current, JSON.stringify(json));
        }
      });
    }
    $.getJSON(s.vals.namesURL, function(json) {
      var html, player, _j, _len1;
      html = "";
      for (_j = 0, _len1 = json.length; _j < _len1; _j++) {
        player = json[_j];
        html += "<option>" + player + "</option>";
      }
      return s.els.playerSelect.append(html).chosen({
        width: "100%"
      });
    });
    selectHTML = s.els.origVarSelect.html();
    return s.els.varSelects.html(selectHTML).chosen({
      allow_single_deselect: true,
      width: "75%"
    });
  };
  renderChart = function(s) {
    var scales, selected;
    s.vals.selections = selected = getSelected(s.els);
    if (validateSelections(selected)) {
      s.data.graphingSet = getGraphingData(selected, s.data.fullSet);
      scales = calculateScales(selected, s.data.graphingSet);
      return drawChart(s.data.graphingSet, selected, scales);
    }
  };
  resetGraphingData = function(s) {
    s.data.graphingSet = {};
    return s.vals.selections = {};
  };
  getSelected = function(el) {
    return {
      seasons: (function() {
        var season, _i, _len, _ref, _results;
        _ref = el.seasonCheck.filter(":checked");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          season = _ref[_i];
          _results.push($(season).val());
        }
        return _results;
      })(),
      positions: (function() {
        var position, _i, _len, _ref, _results;
        _ref = el.positionCheck.filter(":checked");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          position = _ref[_i];
          _results.push($(position).val());
        }
        return _results;
      })(),
      players: (function() {
        var player, _i, _len, _ref, _results;
        _ref = el.selectedPlayersSpan();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          player = _ref[_i];
          _results.push($(player).val());
        }
        return _results;
      })(),
      variables: (function() {
        var values, variable, _i, _len, _ref;
        values = {};
        _ref = el.varSelects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          variable = _ref[_i];
          values[$(variable).attr("data-axis")] = $(variable).find(":selected").attr("data-stat");
        }
        return values;
      })(),
      sortType: (function() {
        return el.playerPosRadio.filter(":checked").val();
      })(),
      statType: (function() {
        return el.gameSeasonRadio.filter(":checked").val();
      })()
    };
  };
  validateSelections = function(selections) {
    var missing, playerOrPosition, validity;
    validity = true;
    missing = {};
    if (!s.els.seasonCheck.filter(":checked").length) {
      validity = false;
    }
    if (s.els.playerPosRadio.filter(":checked").length) {
      playerOrPosition = s.els.playerPosRadio.filter(":checked").val();
      if (playerOrPosition === "player" && !s.els.selectedPlayersLi().length) {
        validity = false;
      }
      if (playerOrPosition === "position" && !s.els.positionCheck.filter(":checked").length) {
        validity = false;
      }
    } else {
      validity = false;
    }
    if (!(s.els.varSelects.filter("#x-select").find(":checked").val().length && s.els.varSelects.filter("#y-select").find(":checked").val().length)) {
      validity = false;
    }
    if (!s.els.gameSeasonRadio.filter(":checked").length) {
      validity = false;
    }
    /*
    
    for key, val of selections when key isnt "players" or "positions"
      _log "key:"
      _log key
      _log "val:"
      _log val
      _log "val.length:"
      _log val.length
      validity = false if not val.length
    
    if (selections.sortType is "players" and not selections.players.length) or (selections.sortType is "positions" and not selections.positions.length)
      validity = false
    */

    _log("validity: " + validity);
    return validity;
  };
  getGraphingData = function(sel, data) {
    var dataPoints, match, name, player, position, season, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    _log("getGraphingData started...");
    _log("sel:");
    _log(sel);
    _log("data:");
    _log(data);
    dataPoints = [];
    if (sel.sortType === "positions") {
      _ref = sel.seasons;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        season = _ref[_i];
        _ref1 = sel.positions;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          position = _ref1[_j];
          _ref2 = data[season][position];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            player = _ref2[_k];
            dataPoints.push(player);
          }
        }
      }
    } else if (sel.sortType === "players") {
      _ref3 = sel.seasons;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        season = _ref3[_l];
        _ref4 = data[season];
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          position = _ref4[_m];
          _ref5 = sel.players;
          for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
            name = _ref5[_n];
            match = data[season][position].filter(function(player) {
              return player.Name === name;
            });
            if (match.length) {
              dataPoints.push(match);
            }
          }
        }
      }
    }
    if (sel.statType === "game") {
      dataPoints = calculatePerGameData(dataPoints);
    }
    return dataPoints;
  };
  calculatePerGameData = function(data) {
    var key, playerSeason, val, _i, _len, _ref;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      playerSeason = data[_i];
      if (playerSeason.G < s.vals.perGameMinGames) {
        playerSeason = {};
        continue;
      }
      _ref = s.vals.selections.variables;
      for (key in _ref) {
        val = _ref[key];
        if (__indexOf.call(s.vals.perGameStats, val) >= 0) {
          playerSeason[val] = playerSeason[val] / playerSeason.G;
        }
      }
    }
    return data;
  };
  calculateScales = function(sel, data) {
    var chartHeight, chartPadding, chartWidth, datum, scaleVals, scales, v, _i, _len;
    _log("calculateScales started...");
    _log(sel);
    _log(data);
    scales = {};
    chartPadding = s.vals.chartPadding;
    chartWidth = s.vals.chartWidth = s.els.chartWrapper.width();
    chartHeight = s.vals.chartHeight = chartWidth * 0.5;
    scaleVals = {
      x: {
        min: 1000000,
        max: 0
      },
      y: {
        min: 1000000,
        max: 0
      },
      r: {
        min: 1000000,
        max: 0
      },
      c: {
        min: 1000000,
        max: 0
      }
    };
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      datum = data[_i];
      v = sel.variables;
      if (datum[v.xAxis] > scaleVals.x.max) {
        scaleVals.x.max = datum[v.xAxis];
      }
      if (datum[v.xAxis] < scaleVals.x.min) {
        scaleVals.x.min = datum[v.xAxis];
      }
      if (datum[v.yAxis] > scaleVals.y.max) {
        scaleVals.y.max = datum[v.yAxis];
      }
      if (datum[v.yAxis] < scaleVals.y.min) {
        scaleVals.y.min = datum[v.yAxis];
      }
      if (datum[v.rAxis] > scaleVals.r.max) {
        scaleVals.r.max = datum[v.rAxis];
      }
      if (datum[v.rAxis] < scaleVals.r.min) {
        scaleVals.r.min = datum[v.rAxis];
      }
      if (datum[v.cAxis] > scaleVals.c.max) {
        scaleVals.c.max = datum[v.cAxis];
      }
      if (datum[v.cAxis] < scaleVals.c.min) {
        scaleVals.c.min = datum[v.cAxis];
      }
    }
    scales.x = d3.scale.linear().domain([scaleVals.x.min, scaleVals.x.max]).range([chartPadding, chartWidth - chartPadding]);
    scales.y = d3.scale.linear().domain([scaleVals.y.max, scaleVals.y.min]).range([chartPadding, chartHeight - chartPadding]);
    scales.r = d3.scale.linear().domain([scaleVals.r.min, scaleVals.r.max]).range([2, 10]);
    scales.c = d3.scale.linear().domain([scaleVals.c.min, scaleVals.c.max]).range([-0.15, 0.15]);
    return scales;
  };
  drawChart = function(dataset, selected, scales) {
    var c, chartHeight, chartPadding, chartWidth, dot, pieces, posColors, r, scatterplot, scatterplotPoints, svgDomElement, x, xAxis, y, yAxis, _i, _len, _ref, _ref1;
    chartHeight = s.vals.chartHeight;
    chartWidth = s.vals.chartWidth;
    chartPadding = s.vals.chartPadding;
    _log("drawChart started");
    _log(dataset);
    _log(selected);
    _log(scales);
    _log($("#scatterplot-wrapper svg"));
    if ((_ref = s.els.chart) != null) {
      _ref.remove();
    }
    _log($("#scatterplot-wrapper svg"));
    posColors = s.vals.posColors;
    x = selected.variables.xAxis;
    y = selected.variables.yAxis;
    c = selected.variables.cAxis;
    r = selected.variables.rAxis;
    scatterplot = d3.select('#scatterplot-wrapper').append('svg').attr('id', 'd3-scatterplot');
    scatterplotPoints = scatterplot.selectAll("circle").data(dataset).enter().append("circle").attr("cx", function(d) {
      return scales.x(d[x]);
    }).attr("cy", function(d) {
      return scales.y(d[y]);
    }).attr("r", function(d) {
      if (scales.r && d[r]) {
        return scales.r(d[r]);
      } else {
        return 4;
      }
    }).attr("fill", function(d) {
      var base;
      base = posColors[d.FantPos];
      if (scales.c && d[c]) {
        if (scales.c(d[c]) > 0) {
          return Color(base).lightenByAmount(scales.c(d[c])).desaturateByAmount(scales.c(d[c])).toCSS();
        } else {
          return Color(base).darkenByAmount(0 - scales.c(d[c])).saturateByAmount(0 - scales.c(d[c])).toCSS();
        }
      } else {
        return base;
      }
    }).attr("id", function(d) {
      var id;
      id = "";
      id += d.Name.split(" ").join("-") + "_";
      id += d.Season + "_";
      id += d.FantPos;
      return id;
    });
    xAxis = d3.svg.axis().scale(scales.x).orient("bottom");
    yAxis = d3.svg.axis().scale(scales.y).orient("left");
    scatterplot.append("g").attr("class", "axis").attr("id", "xAxis").attr("transform", "translate(0," + (chartHeight - chartPadding) + ")").call(xAxis);
    scatterplot.append("text").attr("class", "xAxis-label").attr("transform", "translate(0," + (chartHeight - chartPadding) + ")").text(x);
    scatterplot.append("g").attr("class", "axis").attr("id", "yAxis").attr("transform", "translate(" + chartPadding + ",0)").call(yAxis);
    scatterplot.append("text").attr("class", "yAxis-label").attr("transform", "translate(" + chartPadding + ",0) rotate(-90)").text(y);
    s.els.chart = s.els.chartWrapper.find("svg");
    s.els.dots = s.els.chart.find("circle");
    _ref1 = s.els.dots;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      dot = _ref1[_i];
      pieces = dot.id.split("_");
      $(dot).attr("data-player-name", pieces[0].split("-").join(" "));
      $(dot).attr("data-player-season", pieces[1]);
      $(dot).attr("data-player-position", pieces[2]);
    }
    svgDomElement = s.els.chartWrapper.find("svg")[0];
    svgDomElement.setAttribute('preserveAspectRatio', 'xMinYMin meet');
    return svgDomElement.setAttribute("viewBox", "0 0 800 400");
  };
  highlightModeSwitch = function() {
    var highlighted, key, value, _results;
    s.els.html.toggleClass("plotter-highlight-mode");
    highlighted = {
      positions: [],
      players: [],
      seasons: []
    };
    if (s.els.html.is(".plotter-highlight-mode")) {
      _log('highlightmodeswitch on');
      s.els.allCheckInput.prop("disabled", true);
      return s.els.allCheckLabels.bind("click.highlightMode", function() {
        var hlStatus, inputElement;
        $(this).toggleClass("highlighted");
        hlStatus = $(this).is(".highlighted");
        inputElement = $("#" + ($(this).attr('for')));
        return highlightModeUpdate(inputElement, hlStatus, highlighted);
      });
    } else {
      _log('highlightModeSwitch off');
      s.els.allCheckInput.prop("disabled", false);
      s.els.allCheckLabels.removeClass("highlighted").unbind("click.highlightMode");
      s.els.dots.attr("class", "");
      _results = [];
      for (key in highlighted) {
        value = highlighted[key];
        _results.push(value = []);
      }
      return _results;
    }
  };
  highlightModeUpdate = function($el, status, highlighted) {
    var posChecked, position, season, seasonChecked, value, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results, _results1, _results2;
    value = $el.val();
    posChecked = ".pos-input:checked";
    seasonChecked = ".yr-input:checked";
    if (status === true) {
      if ($el.is(posChecked)) {
        highlighted.positions.push(value);
      } else if ($el.is(seasonChecked)) {
        highlighted.seasons.push(value);
      }
    } else if (status === false) {
      if ($el.is(posChecked)) {
        utils.removeVals(highlighted.positions, value);
      } else if ($el.is(seasonChecked)) {
        utils.removeVals(highlighted.seasons, value);
      }
    }
    s.els.dots.attr("class", "");
    if (highlighted.seasons.length && highlighted.positions.length) {
      _ref = highlighted.seasons;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        season = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = highlighted.positions;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            position = _ref1[_j];
            _results1.push(s.els.dots.filter("[data-player-season='" + season + "']").filter("[data-player-position='" + position + "']").attr("class", "highlighted-dot").each(function() {
              return $(this).before($("#xAxis"));
            }));
          }
          return _results1;
        })());
      }
      return _results;
    } else {
      if (highlighted.seasons.length) {
        _ref1 = highlighted.seasons;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          season = _ref1[_j];
          _results1.push(s.els.dots.filter("[data-player-season='" + season + "']").attr("class", "highlighted-dot").each(function() {
            return $(this).before($("#xAxis"));
          }));
        }
        return _results1;
      } else if (highlighted.positions.length) {
        _ref2 = highlighted.positions;
        _results2 = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          position = _ref2[_k];
          _results2.push(s.els.dots.filter("[data-player-position='" + position + "']").attr("class", "highlighted-dot").each(function() {
            return $(this).before($("#xAxis"));
          }));
        }
        return _results2;
      }
    }
  };
  playerPosSwitch = function(val) {
    var toShow;
    toShow = s.els.playerPosGroups.filter("[data-input-group='" + val + "']").show();
    return toShow.siblings("[data-input-group]").hide();
  };
  circleCursorIn = function(selector) {
    var props, v;
    _log(selector);
    _log(d3.select(selector));
    props = d3.select(selector)[0][0].__data__;
    v = s.vals.selections.variables;
    s.els.$playerNameYr.html("" + props.Name + " – " + props.Season + " (" + props.FantPos + ", " + props.Tm + ")");
    s.els.$xVar.html(" " + v.xAxis + " ");
    s.els.$yVar.html(" " + v.yAxis + " ");
    s.els.$rVar.html(" " + v.rAxis + " ");
    s.els.$cVar.html(" " + v.cAxis + " ");
    s.els.$xVal.html(props[v.xAxis]);
    s.els.$yVal.html(props[v.yAxis]);
    s.els.$rVal.html(props[v.rAxis]);
    return s.els.$cVal.html(props[v.cAxis]);
  };
  circleCursorOut = function() {
    return s.els.$allHoverSpans.html("&nbsp;");
  };
  clearSelectedPlayers = function() {
    return s.els.selectedPlayersLi().remove();
  };
  utils = {
    removeDupes: function(arr) {
      var key, obj, out, v, _i, _len;
      out = [];
      obj = {};
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        v = arr[_i];
        obj[v] = 0;
      }
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        out.push(key);
      }
      return out;
    },
    removeVals: function() {
      var arr, spot, val, vals, _i, _len;
      arr = arguments[0], vals = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = vals.length; _i < _len; _i++) {
        val = vals[_i];
        if ((spot = arr.indexOf(val)) !== -1) {
          arr.splice(spot, 1);
        }
      }
      return arr;
    },
    nthLast: function(arr, n) {
      var l;
      l = arr.length;
      return arr[l - (n + 1)];
    }
  };
  return {
    init: init,
    utils: utils
  };
})(jQuery);

window.Plotter.init();
