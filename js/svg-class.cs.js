// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function(jQuery) {
  var $, eliminiateDupes;
  $ = jQuery;
  eliminiateDupes = function(arr) {
    var key, obj, out, v, _i, _len;
    out = [];
    obj = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      obj[v] = 0;
    }
    for (key in obj) {
      if (!__hasProp.call(obj, key)) continue;
      out.push(key);
    }
    return out;
  };
  $.fn.svgAddClass = function(value) {
    var classList, classesToAdd;
    classList = [];
    classesToAdd = eliminateDupes(value.split(" "));
    return this.each(function() {
      var cl, _i, _len;
      if ($(this).is("[class]")) {
        classList = $(this).attr("class").split(" ");
      }
      for (_i = 0, _len = classesToAdd.length; _i < _len; _i++) {
        cl = classesToAdd[_i];
        if (__indexOf.call(classList, cl) < 0) {
          classList.push(cl);
        }
      }
      return $(this).attr("class", classList.join(" "));
    });
  };
  $.fn.svgRemoveClass = function(value) {
    var classList, classesToRemove;
    classList = [];
    classesToRemove = eliminateDupes(value.split(" "));
    return this.each(function() {
      var cl, _i, _len;
      if ($(this).is("[class]")) {
        classList = $(this).attr("class").split(" ");
      }
      for (_i = 0, _len = classesToRemove.length; _i < _len; _i++) {
        cl = classesToRemove[_i];
        if (__indexOf.call(classList, cl) >= 0) {
          classList.splice(classList.indexOf(cl), 1);
        }
      }
      return $(this).attr("class", classList.join(" "));
    });
  };
  $.fn.svgToggleClass = function(value) {
    var classList, classesToToggle;
    classList = [];
    classesToToggle = eliminateDupes(value.split(" "));
    return this.each(function() {
      var cl, _i, _len;
      if ($(this).is("[class]")) {
        classList = $(this).attr("class").split(" ");
      }
      for (_i = 0, _len = classesToToggle.length; _i < _len; _i++) {
        cl = classesToToggle[_i];
        if (__indexOf.call(classList, cl) < 0) {
          classList.push(cl);
        } else {
          classList.splice(classList.indexOf(cl), 1);
        }
      }
      return $(this).attr("class", classList.join(" "));
    });
  };
  $.fn.svgIsAllClasses = function(value) {
    var anyIsAll, isClasses;
    isClasses = eliminateDupes(value.split(" "));
    anyIsAll = false;
    this.each(function() {
      var cl, classList, thisIsAll, _i, _len;
      if ($(this).is("[class]")) {
        classList = $(this).attr("class").split(" ");
        thisIsAll = true;
        for (_i = 0, _len = isClasses.length; _i < _len; _i++) {
          cl = isClasses[_i];
          if (__indexOf.call(classList, cl) < 0) {
            thisIsAll = false;
            break;
          }
        }
        if (thisIsAll === true) {
          anyIsAll = true;
          return false;
        }
      }
    });
    return anyIsAll;
  };
  $.fn.svgIsAnyClasses = function(value) {
    var anyIsAny, isClasses;
    isClasses = eliminateDupes(value.split(" "));
    anyIsAny = false;
    this.each(function() {
      var cl, classList, thisIsAny, _i, _len;
      if ($(this).is("[class]")) {
        classList = $(this).attr("class").split(" ");
        thisIsAny = false;
        for (_i = 0, _len = isClasses.length; _i < _len; _i++) {
          cl = isClasses[_i];
          if (__indexOf.call(classList, cl) >= 0) {
            thisIsAny = true;
            break;
          }
        }
        if (thisIsAny === true) {
          anyIsAny = true;
          return false;
        }
      }
    });
    return anyIsAny;
  };
})(jQuery);
